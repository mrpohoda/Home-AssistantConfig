- platform: time_date
  display_options:
    - 'time'
    - 'date'

- platform: rflink
  automatic_add: true

# - platform: command_line
#   name: Nmap modbus Service
#   command: /bin/bash -c "(echo > /dev/tcp/192.168.68.72/502) > /dev/null 2>&1 && echo Up || echo Down"
#   value_template: '{{ value }}'

- platform: statistics
  name: "Energy Byt Bojler Used in the Last 24 Hrs"
  entity_id: sensor.smart_plug_byt_bojler_energy
  state_characteristic: change
  max_age:
    hours: 48
  sampling_size: 3500 # See below
    
- platform: systemmonitor
  resources:
    - type: disk_use_percent
      arg: /config
    - type: disk_use
    - type: disk_free
    - type: memory_use_percent    
    - type: memory_use    
    - type: memory_free   
    - type: swap_use_percent    
    - type: swap_use    
    - type: swap_free   
    - type: load_1m   
    - type: load_5m   
    - type: load_15m    
    - type: processor_use   
    - type: processor_temperature  
    - type: last_boot

# REST sensor for getting current OTE prices from API
- platform: rest
  resource: https://europe-central2-norse-fiber-371513.cloudfunctions.net/ote
  scan_interval: 3600000
  name: OTE rates
  unique_id: ote_rates_123456
  value_template: '1'  # dummy value, not used; avoids the "State max length is 255 characters" error
  json_attributes:
    - data
    - min_day_1_hour
    - min_day_2_hour
    - min_night_1_hour
    - min_night_2_hour
    - max_day_1_hour
    - max_night_1_hour

# Template sensors for OTE prices automations
- platform: template
  sensors: 
    # OTE price for current hour
    ote_current_price:
      value_template: >
        {% set newdate = now() %}
        {{ states.sensor.ote_rates.attributes.data[newdate.hour|string] }}
      icon_template: "mdi:cash"
      device_class: monetary
    
    # OTE minimum price and time during the day
    ote_min_day_price:
      value_template: >
        {{ states.sensor.ote_rates.attributes.data[states.sensor.ote_rates.attributes.min_day_2_hour|string] }}
      icon_template: "mdi:cash"
      device_class: monetary
    ote_max_day_price:
      value_template: >
        {{ states.sensor.ote_rates.attributes.data[states.sensor.ote_rates.attributes.max_day_1_hour|string] }}
      icon_template: "mdi:cash"
      device_class: monetary
    ote_day_price_difference:
      value_template: >
        {{ states('sensor.ote_max_day_price') | float - states('sensor.ote_min_day_price') | float}}
      icon_template: "mdi:cash"
      device_class: monetary
    ote_min_day_time:
      value_template: >
          {% set day_hour = states.sensor.ote_rates.attributes.min_day_2_hour %}
          {% set timestamp = strptime(states('sensor.date')+' '+day_hour|string + ':00', '%Y-%m-%d %H:%M') %}
          {{ as_timestamp(timestamp) | timestamp_custom('%H:%M') }}
      icon_template: "mdi:calendar-clock"
    ote_min_day_time_end:
      value_template: >
        {% set timestamp = as_timestamp(strptime(states('sensor.date')+' '+states('sensor.ote_min_day_time'), '%Y-%m-%d %H:%M')) | int +(60*60*(int(states('input_select.ote_number_of_hours')))) %}
        {{ timestamp | timestamp_custom('%H:%M') }}
      icon_template: "mdi:calendar-clock"
    
    # OTE minimum price and time during the night
    ote_min_night_price:
      value_template: >
        {% set night_hour = states.sensor.ote_rates.attributes.min_night_2_hour %}
        {% if night_hour > 999 %}
            {{ states('sensor.ote_min_night_price') }}
        {% else %}
            {{ states.sensor.ote_rates.attributes.data[night_hour|string] }}
        {% endif %}
      icon_template: "mdi:cash"
      device_class: monetary
    ote_min_night_time:
      value_template: >
        {% set night_hour = states.sensor.ote_rates.attributes.min_night_2_hour %}
        {% if night_hour > 999  %}
          {{ states('sensor.ote_min_night_time') }}
        {% else %}
          {% if night_hour > 23 %}
            {% set night_hour = night_hour - 24 %}
          {% endif %}
          {% set timestamp_night = as_timestamp(strptime(states('sensor.date')+' '+night_hour|string + ':00','%Y-%m-%d %H:%M')) %}
          {{ timestamp_night | timestamp_custom('%H:%M') }}
        {% endif %}
      icon_template: "mdi:calendar-clock"
    ote_min_night_time_end:
      value_template: >
        {% set timestamp = as_timestamp(strptime(states('sensor.date')+' '+states('sensor.ote_min_night_time'), '%Y-%m-%d %H:%M')) | int +(60*60*(int(states('input_select.ote_number_of_hours')))) %}
        {{ timestamp | timestamp_custom('%H:%M') }}
      icon_template: "mdi:calendar-clock"
    
    # OTE data for chart
    ote_chart_data:
      friendly_name: "OTE Chart Data"
      value_template: "{{ states('sensor.ote_current_price') }}"
      attribute_templates:
        data: >
          {% set data = namespace(numbers=[]) %}
          {% set items = states.sensor.ote_rates.attributes.data %}
          {% for i in items %}
            {% set i = i|int %}
            {% if i > 23 %}
              {% set data.hour = i - 24 %}
            {% else %}
              {% set data.hour = i %}
            {% endif %}
            {% set data.current_date = today_at(data.hour ~ ":00") %}
            {% if i > 23 %}
              {% set data.current_date = data.current_date + timedelta(days=1) %}
            {% endif %}
            {% set data.numbers = data.numbers + [[data.current_date.strftime('%Y-%m-%d %H:%M:%S'), items[i|string]]] %}
          {% endfor %}
          {{ data.numbers }}
        icon_template: "mdi:cash"

    forecast_solar_today:
      friendly_name: "Solar Forecast Today"
      unit_of_measurement: "kWh"
      value_template: >
        {% set east = states('sensor.energy_production_today') | float %}
        {% set west = states('sensor.energy_production_today_2') | float %}
        {{ ((east + west)) | round(1) }}
        
    forecast_solar_tomorrow:
      friendly_name: "Solar Forecast Tomorrow"
      unit_of_measurement: "kWh"
      value_template: >
        {% set east = states('sensor.energy_production_tomorrow') | float %}
        {% set west = states('sensor.energy_production_tomorrow_2') | float %}
        {{ ((east + west)) | round(1) }}

# https://home-assistant.io/components/sensor.template/
# https://www.home-assistant.io/integrations/template#legacy-sensor-configuration-format
- platform: template
  sensors:
    senzory_s_bateriou_pod_20:
      friendly_name: Senzory s baterií pod 20%
      value_template: >-
        {%- set domains = ['sensor'] -%}
        {%- set threshold = 20 -%}
        {%- set exclude_entities = ['sensor.iphonepavol_battery_level','sensor.tabletlenovo_battery_level','sensor.tabletlenovofkb_browser_battery'] -%}
        Senzory s batériou pod 20%:
        {%- for domain in domains -%}
          {%- for item in states[domain] | rejectattr('state', 'in', ['unavailable', 'unknown']) -%}
            {%- if item.entity_id not in exclude_entities -%}
              {%- if item.attributes.battery_level is defined -%}
                {%- set level = item.attributes.battery_level|int(0) -%}
                {% if level|int(0) > 0 and level < threshold %}
        - {{ item.attributes.friendly_name }} ({{ item.attributes['battery_level']|int(0)}}%)
                {%- endif -%}
              {%- endif -%}
              {%- if item.attributes.device_class is defined and item.attributes.device_class == 'battery' -%}
                {%- set level = item.state|int(0) -%}
                {% if level > 0 and level <= threshold %}
        - {{ item.attributes.friendly_name }} ({{ item.state|int(0) }}%)
                {%- endif -%}
              {%- endif %}
            {%- endif -%}
          {%- endfor -%}
        {%- endfor -%}
